# CyberYI PFS 项目 Prompt

## 项目概述

设计并开发一个现代化、功能丰富的个人财务管理系统 "CyberYI PFS"，使用以下技术栈：

前端：
- Next.js（React 框架）
- Radix UI（组件库）
- TypeScript

后端：
- Express.js
- PostgreSQL（数据库）

## UI/UX 设计要求

1. 整体布局：
   - 顶部导航栏：logo、产品名 "CyberYI PFS"、语言切换、用户头像
   - 左侧边栏：主要导航项（仪表盘、账户、交易等）
   - 主内容区：网格布局，展示多个信息模块
   - 右上角："新建账户"按钮
   - 登录界面
   - 个人中心中的暗黑/明亮模式切换按钮

2. 设计风格：
   - 体现科技感、专业性和可靠性
   - 简洁线条、适度留白、清晰层次
   - 明暗两种模式，保证良好对比度和可读性

3. 配色方案：
   - 明亮模式：白色背景，深色文字
   - 暗黑模式：深灰/黑色背景，浅色文字
   - 选择统一的品牌主色调
   - 使用对比色表示数据变化

4. 字体和排版：
   - 清晰的无衬线字体，支持多语言
   - 运用字体大小和粗细层级区分信息重要性

5. 数据可视化（使用适配 Next.js 的图表库，如 Recharts）：
   - 总资产负债比例图（环形图）
   - 收入和支出趋势图（折线图）
   - 投资组合分布图（饼图）
   - 储蓄目标进度条

6. 信息模块：
   - 净资产概览
   - 收入统计
   - 支出统计
   - 储蓄率
   - 投资组合概览
   - 最近交易记录
   - 预算执行情况
   - 财务健康指标

7. 交互元素（使用 Radix UI 组件）：
   - 下拉菜单
   - 标签页
   - 工具提示
   - 开关按钮
   - 下拉选择
   - 可折叠面板

8. 多语言支持：
   - 支持中、英、俄、法四种语言
   - 使用 Next.js 的国际化方案
   - 适配不同国家的日期、数字格式
   - 考虑不同文化背景的用户习惯和偏好

9. 响应式设计：
   - 桌面版、平板版和移动版布局
   - 使用 Next.js 的 Image 组件优化图片加载

10. 其他功能：
    - 欢迎/登录页面
    - 简洁现代的 logo 设计
    - 数据更新的过渡动画
    - 命令模式界面（键盘快捷操作）

## 技术实现要点

1. 前端（Next.js + Radix UI）：
   - 使用 Next.js 的 App Router 进行路由管理
   - 实现服务器端渲染(SSR)和静态站点生成(SSG)
   - 使用 Radix UI 组件构建一致的 UI 界面
   - 实现���黑模式切换（使用 CSS 变量和 Radix UI 的主题支持）
   - 使用 Next.js 的 API 路由与后端通信
   - 实现多语言支持和国际化
   - 使用 Next.js 的图片优化和代码分割功能
   - 实现渐进式加载和骨架屏
   - 优化大数据集的处理和展示

2. 后端（Express.js）：
   - 设计 RESTful API 接口
   - 实现用户认证和授权（如使用 JWT）
   - 处理数据聚合和计算逻辑
   - 实现数据库查询优化
   - 考虑使用微服务架构，使用 Docker 和 Kubernetes
   - 实现事件驱动架构，使用消息队列（如 RabbitMQ）
   - 设计 API 网关，便于未来功能扩展
   - 实施强大的错误处理和日志记录机制
   - 考虑未来的 API 版本控制策略

3. 数据库（PostgreSQL）：
   - 设计高效的数据库模式
   - 使用适当的索引优化查询性能
   - 实现事务管理确保数据一致性
   - 考虑使用 PostgreSQL 的 JSON 功能存储灵活数据
   - 实现自动化备份策略、数据恢复和版本控制功能
   - 设计数据归档和清理流程

4. 安全性：
   - 实现 HTTPS
   - 防御 XSS 和 CSRF 攻击
   - 数据加密存储敏感信息
   - 实现速率限制防止暴力攻击
   - 实现符合 GDPR、CCPA 等法规的数据处理流程
   - 提供用户数据导出和删除功能
   - 实现端到端加密处理敏感财务数据
   - 设计清晰的隐私政策和用户同意流程
   - 实施定期渗透测试和漏洞扫描

5. 性能优化：
   - 设定具体的性能目标：
     - 页面加载时间 < 2 秒
     - 首次内容绘制（FCP）< 1 秒
     - 交互到可用时间（TTI）< 3 秒
   - 使用 Lighthouse 进行性能审计
   - 实现前端缓存策略
   - 后端实现数据缓存（如使用 Redis）
   - 优化数据库查询和索引

6. 测试：
   - 前端：使用 Jest 和 React Testing Library
   - 后端：使用 Mocha 或 Jest 进行单元测试和集成测试
   - 端到端测试：使用 Cypress
   - 使用 JMeter 进行负载测试

7. 部署：
   - 前端：部署到 Vercel 或类似平台
   - 后端：使用 Docker 容器化，部署到云平台（如 AWS、GCP 或 Azure）
   - 数据库：使用云数据库服务或自托管 PostgreSQL
   - 使用 GitHub Actions 或 GitLab CI 实现自动化测试和部署
   - 实施蓝绿部署或金丝雀发布策略
   - 设置自动化监控和警报系统

8. 监控和日志：
   - 实现应用程序性能监控
   - 设置错误跟踪和报告系统
   - 实现用户行为分析

9. 第三方集成：
   - 开发与主要银行 API 的集成接口
   - 实现与流行投资平台的数据同步
   - 提供导入/导出功能，支持常见财务软件格式
   - 使用 Plaid API 用于银行数据聚合
   - 使用 Auth0 进行身份认证和授权

10. AI 驱动的智能功能：
    - 实现基于机器学习的交易自动分类
    - 开发预测性支出分析和预警系统
    - 集成智能财务顾问，提供个性化建议
    - 实现异常交易检测功能

11. 跨平台体验：
    - 开发 iOS 和 Android 原生应用
    - 实现跨设备数据同步
    - 设计统一的设计语言，确保一致的用户体验

12. 可访问性和包容性设计：
    - 严格遵循 WCAG 2.1 AA 级标准
    - 实现高对比度模式和字体大小调节
    - 使用 ARIA 属性增强屏幕阅读器兼容性
    - 确保键盘导航友好

13. 国际化和本地化：
    - 支持多种货币和汇率实时转换
    - 适配不同国家的日期、数字格式
    - 考虑不同文化背景的用户习惯和偏好

14. DevOps 和 CI/CD：
    - 使用 GitHub Actions 或 GitLab CI 实现自动化测试和部署
    - 设置自动化监控和警报系统
    - DevOps 流程图

15. 文档和代码质量：
    - 使用 TypeDoc 生成 API 文档
    - 实施严格的代码审查流程
    - 使用 Storybook 创建组件库文档

16. 用户反馈和支持系统：
    - 集成实时聊天支持功能
    - 实现用户反馈收集和分析系统
    - 开发帮助中心和 FAQ 部分
    - 用户反馈收集和处理流程

17. 数据管理：
    - 实现自动化备份策略
    - 开发数据恢复和版本控制功能
    - 设计数据归档和清理流程

18. 可扩展架构：
    - 采用微服务架构，使用 Docker 和 Kubernetes
    - 实现事件驱动架构，使用消息队列（如 RabbitMQ）
    - 设计 API 网关，便于未来功能扩展

19. 开源集成：
    - 使用 Chart.js 或 D3.js 进行高级数据可视化
    - 集成 Plaid API 用于银行数据聚合
    - 使用 Auth0 进行身份认证和授权

20. 高级用户功能：
    - 开发财务目标设定和跟踪系统
    - 实现多用户账户管理（家庭共享）
    - 提供高级报表和数据导出功能

21. 区块链集成：
    - 考虑加密货币资产跟踪功能
    - 探索使用区块链技术增强数据安全性

## Supabase 项目信息

- Project URL：https://mppegjxobzgnpmxsqrlu.supabase.co
- API Key（anon public）：eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im1wcGVnanhvYnpnbnBteHNxcmx1Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3MjgzNzQ1OTMsImV4cCI6MjA0Mzk1MDU5M30.0AtSOgW20GZviJwwTZeAiJ7FH_IbwNXcdgUfeqaOPyw

使用 Supabase 客户端库：
javascript
import { createClient } from '@supabase/supabase-js'
const supabaseUrl = 'https://mppegjxobzgnpmxsqrlu.supabase.co'
const supabaseKey = process.env.SUPABASE_KEY
const supabase = createClient(supabaseUrl, supabaseKey)
注意：此密钥在启用行级安全（RLS）并配置策略的情况下，可安全地在浏览器中使用。

注意：此密钥在启用行级安全（RLS）并配置策略的情况下，可安全地在浏览器中使用。

## 需要提供的额外文档

1. 系统架构图
2. 数据库模式设计
3. 系统安全架构图
4. 数据流图
5. 组件结构树
6. API 接口文档
7. 第三方集成清单和 API 文档
8. 性能优化策略文档
9. 国际化和本地化计划
10. DevOps 流程图
11. 状态管理策略
12. 用户反馈收集和处理流程

## 设计和开发注意事项

- 确保设计和开发过程中考虑到可扩展性、可维护性和性能优化。
- 确保所有新功能和考虑因素都与现有系统无缝集成，并维持高水平的用户体验和系统性能。
- 采用模块化设计，便于功能的独立开发和测试。
- 实施强大的错误处理和日志记录机制。
- 设计灵活的用户权限系统，支持不同级别的访问控制。
- 优先考虑用户隐私和数据安全，将其作为设计和开发的核心原则。

## 任务

请根据以上所有信息，设计并开发 "CyberYI PFS" 个人财务管理系统，确保满足所有要求，并提供必要的文档和支持。

注：请综合所有提供的信息，确保项目的完整性和高质量交付。
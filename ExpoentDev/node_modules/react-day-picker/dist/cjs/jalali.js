"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DayPicker = DayPicker;
const react_1 = __importDefault(require("react"));
const jalaliDateLib = __importStar(require("date-fns-jalali"));
const index_js_1 = require("./index.js");
function DayPicker(props) {
    return (react_1.default.createElement(index_js_1.DayPicker
    // @ts-expect-error The type definitions for the date-fns-jalali library
    //     are not compatible with the date-fns 4.0 types. The `addDays`
    //     function's return type is causing a type mismatch. (This casting should
    //     be not needed when date-fns-jalali upgrades to date-fns@4)
    , { 
        // @ts-expect-error The type definitions for the date-fns-jalali library
        //     are not compatible with the date-fns 4.0 types. The `addDays`
        //     function's return type is causing a type mismatch. (This casting should
        //     be not needed when date-fns-jalali upgrades to date-fns@4)
        dateLib: jalaliDateLib, ...props }));
}
//# sourceMappingURL=jalali.js.map
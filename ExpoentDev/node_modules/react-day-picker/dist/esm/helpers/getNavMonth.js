import { TZDate } from "@date-fns/tz";
/** Return the start and end months for the calendar navigation. */
export function getNavMonths(props, dateLib) {
    let { startMonth, endMonth } = props;
    const { startOfYear, startOfDay, startOfMonth, endOfMonth, addYears, endOfYear } = dateLib;
    // Handle deprecated code
    const { fromYear, toYear, fromMonth, toMonth } = props;
    if (!startMonth && fromMonth) {
        startMonth = fromMonth;
    }
    if (!startMonth && fromYear) {
        startMonth = new Date(fromYear, 0, 1);
    }
    if (!endMonth && toMonth) {
        endMonth = toMonth;
    }
    if (!endMonth && toYear) {
        endMonth = new Date(toYear, 11, 31);
    }
    const hasDropdowns = props.captionLayout?.startsWith("dropdown");
    if (startMonth) {
        startMonth = startOfMonth(startMonth);
    }
    else if (fromYear) {
        startMonth = new Date(fromYear, 0, 1);
    }
    else if (!startMonth && hasDropdowns) {
        const today = props.today ??
            (props.timeZone
                ? TZDate.tz(props.timeZone)
                : dateLib.Date
                    ? new dateLib.Date()
                    : new Date());
        startMonth = startOfYear(addYears(today, -100));
    }
    if (endMonth) {
        endMonth = endOfMonth(endMonth);
    }
    else if (toYear) {
        endMonth = new Date(toYear, 11, 31);
    }
    else if (!endMonth && hasDropdowns) {
        const today = props.today ??
            (props.timeZone
                ? TZDate.tz(props.timeZone)
                : dateLib.Date
                    ? new dateLib.Date()
                    : new Date());
        endMonth = endOfYear(today);
    }
    return [
        startMonth ? startOfDay(startMonth) : startMonth,
        endMonth ? startOfDay(endMonth) : endMonth
    ];
}
//# sourceMappingURL=getNavMonth.js.map